name: Docker Build and Test

on:
  push:
    tags:
      - '*.*.*'

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/summarizer
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
  OLLAMA_MODEL_NAME: "phi4-mini"
  OLLAMA_VERSION: "0.11.7"
  DAPR_CLI_VERSION: "1.15.1"
  DAPR_RUNTIME_VERSION: "1.15.10"

jobs:
  docker-test:
    runs-on: ubuntu-latest
    timeout-minutes: 60  # Add timeout to prevent infinite stalling
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
        # this might remove tools that are actually needed,
        # if set to "true" but frees about 6 GB
        tool-cache: false
        
        # all of these default to true, but feel free to set to
        # "false" if necessary for your workflow
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true

    - name: Additional cleanup
      run: |
        echo "=== Additional disk cleanup ==="
        # Clean package managers
        sudo apt-get clean
        sudo apt-get autoremove -y
        sudo apt-get autoclean
        
        # Clean Docker completely
        docker system prune -a -f --volumes
        
        echo "=== Final disk usage ==="
        df -h

    - name: Install Ollama
      uses: ai-action/setup-ollama@v1
      with:
        version: ${{ env.OLLAMA_VERSION }}

    - name: Setup Ollama Chat completion model
      run: |
        echo "Starting Ollama service..."
        ollama serve &
        
        # Wait for Ollama to be ready
        echo "Waiting for Ollama to start..."
        timeout 60 bash -c 'until curl -s http://localhost:11434/api/tags > /dev/null 2>&1; do sleep 2; done'
        
        echo "Pulling ${{ env.OLLAMA_MODEL_NAME }} model..."
        ollama pull ${{ env.OLLAMA_MODEL_NAME }}

    - name: Setup Dapr CLI specific version
      uses: dapr/setup-dapr@v1
      with:
        version: ${{ env.DAPR_CLI_VERSION }}
      id: install

    - name: Initialize Dapr
      id: dapr-setup
      continue-on-error: true
      run: |
        export GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
        dapr init --runtime-version=${{ env.DAPR_RUNTIME_VERSION }}
        dapr --version
        # Verify daprd exists in the expected location
        ls -la $HOME/.dapr/bin/
        # Add Dapr CLI to PATH for current session and make it persistent
        echo "$HOME/.dapr/bin" >> $GITHUB_PATH
        export PATH="$HOME/.dapr/bin:$PATH"
        # Verify daprd is accessible
        if command -v daprd &> /dev/null; then
          echo "daprd found in PATH: $(which daprd)"
          daprd --version
          echo "dapr-available=true" >> $GITHUB_OUTPUT
        else
          echo "daprd not found in PATH, checking direct path..."
          if [ -f "$HOME/.dapr/bin/daprd" ]; then
            echo "daprd found at: $HOME/.dapr/bin/daprd"
            $HOME/.dapr/bin/daprd --version
            echo "dapr-available=true" >> $GITHUB_OUTPUT
          else
            echo "ERROR: daprd not found"
            echo "dapr-available=false" >> $GITHUB_OUTPUT
            exit 1
          fi
        fi
        # Create symlink for compatibility with test configuration  
        sudo mkdir -p /home/vscode/.dapr/bin
        sudo ln -sf $HOME/.dapr/bin/daprd /home/vscode/.dapr/bin/daprd
    

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Pre-build cleanup
      run: |
        echo "=== Aggressive pre-build cleanup ==="
        docker system prune -a -f --volumes
        docker builder prune -a -f
        df -h
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag

    - name: Build image
      uses: docker/build-push-action@v6
      with:
        context: ./summarizer
        load: true  
        push: false  
        tags: |
          summarizer:test
          ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Run tests in container
      env:
        # General settinfgs
        HUGGING_FACE_TOKEN: ${{ secrets.HUGGING_FACE_TOKEN }}
        INFERENCE_DEVICE: cpu
        
        # Azure provider tests
        AZURE_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}
        AZURE_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
        AZURE_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
        AI_FOUNDRY_PROJECT_ENDPOINT: ${{ secrets.AI_FOUNDRY_PROJECT_ENDPOINT }}
        AZURE_CHAT_DEPLOYMENT_NAME: ${{ secrets.AZURE_CHAT_DEPLOYMENT_NAME }}
        AZURE_AUDIO_DEPLOYMENT_NAME: ${{ secrets.AZURE_AUDIO_DEPLOYMENT_NAME }}
        
        # Ollama tests
        OLLAMA_HOST: http://localhost:11434
        OLLAMA_MODEL_NAME: ${{ env.OLLAMA_MODEL_NAME }}

        # Workflow tests, choose a provider
        CHAT_COMPLETION_PROVIDER: "azure"
        AUDIO_COMPLETION_PROVIDER: "azure"
        # Not in ctn env
        SKIP_WORKFLOW_TESTS: false
      run: |
        docker run --rm \
          --network host \
          --workdir /app \
          --env HUGGING_FACE_TOKEN \
          --env INFERENCE_DEVICE \
          --env AZURE_TENANT_ID \
          --env AZURE_CLIENT_ID \
          --env AZURE_CLIENT_SECRET \
          --env AI_FOUNDRY_PROJECT_ENDPOINT \
          --env AZURE_CHAT_DEPLOYMENT_NAME \
          --env AZURE_AUDIO_DEPLOYMENT_NAME \
          --env OLLAMA_HOST \
          --env OLLAMA_MODEL_NAME \
          --env CHAT_COMPLETION_PROVIDER \
          --env AUDIO_COMPLETION_PROVIDER \
          -v /home/runner:/host-runner:rw \
          --entrypoint="" \
          summarizer:test \
          poetry run pytest tests/ -v --tb=short -k "not workflow"

    - name: Health Check
      env:
        # General settinfgs
        HUGGING_FACE_TOKEN: ${{ secrets.HUGGING_FACE_TOKEN }}
        INFERENCE_DEVICE: cpu
        
        # Azure provider tests
        AZURE_TENANT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).tenantId }}
        AZURE_CLIENT_ID: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
        AZURE_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
        AI_FOUNDRY_PROJECT_ENDPOINT: ${{ secrets.AI_FOUNDRY_PROJECT_ENDPOINT }}
        AZURE_CHAT_DEPLOYMENT_NAME: ${{ secrets.AZURE_CHAT_DEPLOYMENT_NAME }}
        AZURE_AUDIO_DEPLOYMENT_NAME: ${{ secrets.AZURE_AUDIO_DEPLOYMENT_NAME }}
        
        # Ollama tests
        OLLAMA_HOST: http://localhost:11434
        OLLAMA_MODEL_NAME: ${{ env.OLLAMA_MODEL_NAME }}

        # Workflow tests, choose a provider
        CHAT_COMPLETION_PROVIDER: "azure"
        AUDIO_COMPLETION_PROVIDER: "azure"
        SKIP_WORKFLOW_TESTS: false
      run: |
        echo "=== Starting health check ==="
        
        # Start the container in detached mode with health check
        CONTAINER_ID=$(docker run -d \
          --name summarizer-healthcheck \
          --publish 8000:8000 \
          --env HTTP_PORT=8000 \
          --env HUGGING_FACE_TOKEN \
          --env INFERENCE_DEVICE \
          --env AZURE_TENANT_ID \
          --env AZURE_CLIENT_ID \
          --env AZURE_CLIENT_SECRET \
          --env AI_FOUNDRY_PROJECT_ENDPOINT \
          --env AZURE_CHAT_DEPLOYMENT_NAME \
          --env AZURE_AUDIO_DEPLOYMENT_NAME \
          --env OLLAMA_HOST \
          --env OLLAMA_MODEL_NAME \
          --env CHAT_COMPLETION_PROVIDER \
          --env AUDIO_COMPLETION_PROVIDER \
          --env SKIP_WORKFLOW_TESTS \
          summarizer:test)
        
        echo "Container started with ID: $CONTAINER_ID"
        
        # Wait for the application to start up
        echo "Waiting for application to start..."
        sleep 30
        
        # Check container logs for any immediate issues
        echo "=== Container logs ==="
        docker logs $CONTAINER_ID | tail -20
        
        # Perform health check
        echo "=== Performing health check ==="
        MAX_RETRIES=10
        RETRY_COUNT=0
        HEALTH_CHECK_PASSED=false
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          echo "Health check attempt $((RETRY_COUNT + 1))/$MAX_RETRIES"
          
          if curl -f -s http://localhost:8000/health; then
            echo "✅ Health check passed!"
            HEALTH_CHECK_PASSED=true
            break
          else
            echo "❌ Health check failed, retrying in 10 seconds..."
            sleep 10
            RETRY_COUNT=$((RETRY_COUNT + 1))
          fi
        done
        
        # Show final container logs
        echo "=== Final container logs ==="
        docker logs $CONTAINER_ID | tail -50
        
        # Cleanup
        echo "=== Cleaning up ==="
        docker stop $CONTAINER_ID
        docker rm $CONTAINER_ID
        
        # Exit with error if health check failed
        if [ "$HEALTH_CHECK_PASSED" != "true" ]; then
          echo "❌ Health check failed after $MAX_RETRIES attempts"
          exit 1
        fi
        
        echo "✅ Health check completed successfully"

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push image to Docker Hub
      uses: docker/build-push-action@v6
      with:
        context: ./summarizer
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        name: Release ${{ steps.release_notes.outputs.VERSION }}
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
        generate_release_notes: true
        make_latest: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}