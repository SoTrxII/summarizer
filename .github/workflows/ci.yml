name: CI

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
    
    - name: Setup Dapr CLI specific version
      uses: dapr/setup-dapr@v1
      with:
        version: "1.15.1"
      id: install

    - name: Initialize Dapr
      id: dapr-setup
      continue-on-error: true
      run: |
        export GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
        dapr init --runtime-version=1.15.10
        dapr --version
        # Verify daprd exists in the expected location
        ls -la $HOME/.dapr/bin/
        # Add Dapr CLI to PATH for current session and make it persistent
        echo "$HOME/.dapr/bin" >> $GITHUB_PATH
        export PATH="$HOME/.dapr/bin:$PATH"
        # Verify daprd is accessible
        if command -v daprd &> /dev/null; then
          echo "daprd found in PATH: $(which daprd)"
          daprd --version
          echo "dapr-available=true" >> $GITHUB_OUTPUT
        else
          echo "daprd not found in PATH, checking direct path..."
          if [ -f "$HOME/.dapr/bin/daprd" ]; then
            echo "daprd found at: $HOME/.dapr/bin/daprd"
            $HOME/.dapr/bin/daprd --version
            echo "dapr-available=true" >> $GITHUB_OUTPUT
          else
            echo "ERROR: daprd not found"
            echo "dapr-available=false" >> $GITHUB_OUTPUT
            exit 1
          fi
        fi
        # Create symlink for compatibility with test configuration  
        sudo mkdir -p /home/vscode/.dapr/bin
        sudo ln -sf $HOME/.dapr/bin/daprd /home/vscode/.dapr/bin/daprd

    - name: Azure login (service principal)
      if: ${{ env.AZURE_CREDENTIALS != '' && contains(env.AZURE_CREDENTIALS, 'clientId') }}
      uses: azure/login@v2
      with:
        creds: ${{ env.AZURE_CREDENTIALS }}

    - name: Set up Python
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 2.1.3
        virtualenvs-create: true
        virtualenvs-in-project: true
        virtualenvs-path: .venv
        installer-parallel: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: summarizer/.venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        echo "Installing dependencies..."
        cd summarizer
        poetry install --no-interaction

    - name: Run tests
      working-directory: ./summarizer
      env:
        AI_FOUNDRY_PROJECT_ENDPOINT: ${{ secrets.AI_FOUNDRY_PROJECT_ENDPOINT }}
        AZURE_CHAT_DEPLOYMENT_NAME: ${{ secrets.AZURE_CHAT_DEPLOYMENT_NAME }}
        HUGGING_FACE_TOKEN: ${{ secrets.HUGGING_FACE_TOKEN }}
        AZURE_AUDIO_DEPLOYMENT_NAME: ${{ secrets.AZURE_AUDIO_DEPLOYMENT_NAME }}
        INFERENCE_DEVICE: cpu
        SKIP_WORKFLOW_TESTS: ${{ steps.dapr-setup.outputs.dapr-available != 'true' }}
        #OTLP_ENDPOINT: "http://localhost:4317"
        #SEMANTICKERNEL_EXPERIMENTAL_GENAI_ENABLE_OTEL_DIAGNOSTICS_SENSITIVE: false
      run: |
        # Ensure daprd is available for workflow tests
        export PATH="$HOME/.dapr/bin:$PATH"
        echo "SKIP_WORKFLOW_TESTS is set to: $SKIP_WORKFLOW_TESTS"
        if [ "$SKIP_WORKFLOW_TESTS" = "true" ]; then
          echo "Workflow tests will be skipped due to Dapr setup issues"
        else
          echo "Workflow tests will be executed"
          if command -v daprd &> /dev/null; then
            echo "daprd found: $(which daprd)"
            daprd --version
          else
            echo "Warning: daprd not found in PATH, workflow tests may fail"
          fi
        fi
        poetry run pytest tests/ -v --tb=short

    - name: Cleanup Dapr services
      if: always()
      run: |
        # Stop placement and scheduler services
        if [ -f /tmp/placement.pid ]; then
          kill $(cat /tmp/placement.pid) 2>/dev/null || true
          rm -f /tmp/placement.pid
        fi
        
        if [ -f /tmp/scheduler.pid ]; then
          kill $(cat /tmp/scheduler.pid) 2>/dev/null || true
          rm -f /tmp/scheduler.pid
        fi
        
        echo "Dapr services cleanup completed"